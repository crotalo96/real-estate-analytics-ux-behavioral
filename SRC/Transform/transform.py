# -*- coding: utf-8 -*-
"""Transform.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11H9pyv30uaEUivDJw9IPhb-R57G_fEa_
"""

import pandas as pd

def resumen_estadistico(df: pd.DataFrame, cols: list[str]) -> pd.DataFrame:
    """
    Devuelve estadÃ­sticas descriptivas de las columnas seleccionadas.
    """
    return df[cols].describe()


def filtrar_estratos(df: pd.DataFrame, min_e: int = 1, max_e: int = 6) -> pd.DataFrame:
    """
    Filtra las propiedades por rango de estrato.
    """
    return df[df["estrato"].between(min_e, max_e)]


def precio_promedio_por_estrato(df: pd.DataFrame) -> pd.DataFrame:
    """
    Calcula el precio promedio por estrato.
    """
    df_filtrado = filtrar_estratos(df)
    return (
        df_filtrado.groupby("estrato")["precio_total"]
        .mean()
        .reset_index()
    )


def unir_con_barrios(df_prop: pd.DataFrame, df_barrios: pd.DataFrame) -> pd.DataFrame:
    """
    Realiza un join entre propiedades y barrios.
    """
    return df_prop.merge(df_barrios, on="id_barrio", how="left")


def top_barrios_caros(df_prop: pd.DataFrame, df_barrios: pd.DataFrame, n: int = 10) -> pd.DataFrame:
    """
    Devuelve los N barrios con mayor precio promedio.
    """
    merged = unir_con_barrios(df_prop, df_barrios)
    return (
        merged.groupby("nombre")["precio_total"]
        .mean()
        .reset_index()
        .sort_values(by="precio_total", ascending=False)
        .head(n)
    )